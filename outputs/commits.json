{"6dc1109534daecf9700985ffc163f08b2f434971":{"changes":{"devtools\/client\/jsonview\/test\/browser_jsonview_chunked_json.js":"MODIFY"},"diff":{"devtools\/client\/jsonview\/test\/browser_jsonview_chunked_json.js":[{"add":["96","    [],","97","    () => {","100","        observer.observe(content.wrappedJSObject.JSONView.json, {","101","          characterData: true,","102","        });","104","    }","105","  );"],"delete":["96","    [], () => {","99","        observer.observe(content.wrappedJSObject.JSONView.json, { characterData: true });","101","  });"]}]}},"667c41d5027b98c6e930e4e3ae31a36ae1f5ffa0":{"changes":{"testing\/web-platform\/tests\/fullscreen\/api\/document-exit-fullscreen-nested-shadow-dom.html":"ADD","dom\/base\/Document.cpp":"MODIFY"},"diff":{"testing\/web-platform\/tests\/fullscreen\/api\/document-exit-fullscreen-nested-shadow-dom.html":[{"add":[],"delete":[]}],"dom\/base\/Document.cpp":[{"add":["13519","  \/\/","13520","  \/\/ FIXME(emilio): If this loop does something, it'd violate the assertions","13521","  \/\/ from GetTopLayerTop()... What gives?","13524","    if (!element || element->GetComposedDoc() != this) {"],"delete":["13521","    if (!element || !element->IsInUncomposedDoc() ||","13522","        element->OwnerDoc() != this) {"]}]}},"e970626244302b19dc43c54406e14e9e48274435":{"changes":{"testing\/mozbase\/rust\/mozversion\/src\/lib.rs":"MODIFY"},"diff":{"testing\/mozbase\/rust\/mozversion\/src\/lib.rs":[{"add":["201","        let mut platform_ini = dir;"],"delete":["201","        let mut platform_ini = dir.clone();"]}]}},"d287d441103204e8708ba8707c4ab351ccb3f176":{"changes":{"browser\/components\/aboutlogins\/content\/components\/login-footer.css":"MODIFY"},"diff":{"browser\/components\/aboutlogins\/content\/components\/login-footer.css":[{"add":[],"delete":["20","  padding-inline-end: 70px;","27","  margin-inline-end: auto;"]}]}},"4ce7ac11c36ff5862dadc50cbac05f67f08869b2":{"changes":{"js\/src\/jit\/CacheIR.cpp":"MODIFY"},"diff":{"js\/src\/jit\/CacheIR.cpp":[{"add":["6982","    if (!wrapper) {"],"delete":["6982","    if (!obj) {"]}]}},"52f7e9ce5380820722e1cd6db05ca82539c8b63d":{"changes":{"testing\/mozbase\/mozproxy\/tests\/manifest.ini":"MODIFY"},"diff":{"testing\/mozbase\/mozproxy\/tests\/manifest.ini":[{"add":["5","run-if = python == 3 # The mozproxy command line interface is designed to run on Python 3."],"delete":[]}]}},"4b34ca45f774ec36e79cfa317904505480469e9d":{"changes":{"gfx\/layers\/CompositorAnimationStorage.h":"MODIFY"},"diff":{"gfx\/layers\/CompositorAnimationStorage.h":[{"add":["19","class Layer;"],"delete":["19","class Layers;"]}]}},"14784dc42d7994ea9fc8ff279e5f685501289d60":{"changes":{"storage\/TelemetryVFS.cpp":"MODIFY","storage\/mozStorageConnection.cpp":"MODIFY","modules\/libpref\/init\/StaticPrefList.yaml":"MODIFY","storage\/VacuumManager.cpp":"MODIFY","mobile\/android\/app\/mobile.js":"MODIFY","storage\/mozStorageService.cpp":"MODIFY","storage\/mozStorageService.h":"MODIFY","modules\/libpref\/moz.build":"MODIFY","toolkit\/components\/contentprefs\/ContentPrefService2.jsm":"MODIFY"},"diff":{"storage\/TelemetryVFS.cpp":[{"add":["16","#include \"mozilla\/StaticPrefs_storage.h\"","666","const char* GetVFSName(bool exclusive) {","667","  return exclusive ? \"telemetry-vfs-excl\" : \"telemetry-vfs\";","668","}","670","sqlite3_vfs* ConstructTelemetryVFS(bool exclusive) {","681","  if (!exclusive) {","703","  tvfs->zName = GetVFSName(exclusive);"],"delete":["8","#include \"mozilla\/Preferences.h\"","28","\/**","29"," * By default use the unix-excl VFS, for the following reasons:","30"," * 1. It improves compatibility with NFS shares, whose implementation","31"," *    is incompatible with SQLite's locking requirements.","32"," *    Bug 433129 attempted to automatically identify such file-systems,","33"," *    but a reliable way was not found and the fallback locking is slower than","34"," *    POSIX locking, so we do not want to do it by default.","35"," * 2. It allows wal mode to avoid the memory mapped -shm file, reducing the","36"," *    likelihood of SIGBUS failures when disk space is exhausted.","37"," * 3. It provides some protection from third party database tampering while a","38"," *    connection is open.","39"," * This preference allows to revert to the \"unix\" VFS, that is not exclusive,","40"," * thus it can be used by developers to query a database through the Sqlite","41"," * command line while it's already in use.","42"," *\/","43","#define PREF_MULTI_PROCESS_ACCESS \"storage.multiProcessAccess.enabled\"","44","","683","const char* GetVFSName() { return \"telemetry-vfs\"; }","685","sqlite3_vfs* ConstructTelemetryVFS() {","696","  if (Preferences::GetBool(PREF_MULTI_PROCESS_ACCESS, false)) {","718","  tvfs->zName = GetVFSName();"]}],"storage\/mozStorageConnection.cpp":[{"add":["21","#include \"mozilla\/StaticPrefs_storage.h\"","75","const char* GetVFSName(bool);","568","  int srv = ::sqlite3_open_v2(\":memory:\", &mDBConn, mFlags, GetVFSName(true));","596","  \/\/ Do not set mFileURL here since this is database does not have an associated","597","  \/\/ URL.","610","  bool exclusive = StaticPrefs::storage_sqlite_exclusiveLock_enabled();","611","  int srv;","612","  if (mIgnoreLockingMode) {","613","    exclusive = false;","614","    srv = ::sqlite3_open_v2(NS_ConvertUTF16toUTF8(path).get(), &mDBConn, mFlags,","615","                            sIgnoreLockingVFS);","616","  } else {","617","    srv = ::sqlite3_open_v2(NS_ConvertUTF16toUTF8(path).get(), &mDBConn, mFlags,","618","                            GetVFSName(exclusive));","619","    if (exclusive && (srv == SQLITE_LOCKED || srv == SQLITE_BUSY)) {","620","      \/\/ Retry without trying to get an exclusive lock.","621","      exclusive = false;","622","      srv = ::sqlite3_open_v2(NS_ConvertUTF16toUTF8(path).get(), &mDBConn,","623","                              mFlags, GetVFSName(false));","624","    }","625","  }","632","  if (exclusive &&","633","      (rv == NS_ERROR_STORAGE_BUSY || rv == NS_ERROR_FILE_IS_LOCKED)) {","634","    \/\/ Usually SQLite will fail to acquire an exclusive lock on opening, but in","635","    \/\/ some cases it may successfully open the database and then lock on the","636","    \/\/ first query execution. When initializeInternal fails it closes the","637","    \/\/ connection, so we can try to restart it in non-exclusive mode.","638","    srv = ::sqlite3_open_v2(NS_ConvertUTF16toUTF8(path).get(), &mDBConn, mFlags,","639","                            GetVFSName(false));","640","    if (srv == SQLITE_OK) {","641","      rv = initializeInternal();","642","    }","643","  }","659","  \/\/ Set both mDatabaseFile and mFileURL here.","660","  mFileURL = aFileURL;","661","  mDatabaseFile = databaseFile;","662","","667","  bool exclusive = StaticPrefs::storage_sqlite_exclusiveLock_enabled();","668","  int srv =","669","      ::sqlite3_open_v2(spec.get(), &mDBConn, mFlags, GetVFSName(exclusive));","670","","671","  if (exclusive && (srv == SQLITE_LOCKED || srv == SQLITE_BUSY)) {","672","    \/\/ Retry without trying to get an exclusive lock.","673","    exclusive = false;","674","    srv = ::sqlite3_open_v2(spec.get(), &mDBConn, mFlags, GetVFSName(false));","675","  }","682","  if (exclusive &&","683","      (rv == NS_ERROR_STORAGE_BUSY || rv == NS_ERROR_FILE_IS_LOCKED)) {","684","    \/\/ Usually SQLite will fail to acquire an exclusive lock on opening, but in","685","    \/\/ some cases it may successfully open the database and then lock on the","686","    \/\/ first query execution. When initializeInternal fails it closes the","687","    \/\/ connection, so we can try to restart it in non-exclusive mode.","688","    srv = ::sqlite3_open_v2(spec.get(), &mDBConn, mFlags, GetVFSName(false));","689","    if (srv == SQLITE_OK) {","690","      rv = initializeInternal();","691","    }","692","  }","702","  mConnectionClosed = false;","703","","704","#ifdef MOZ_SQLITE_FTS3_TOKENIZER","705","  DebugOnly<int> srv =","706","      ::sqlite3_db_config(mDBConn, SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER, 1, 0);","707","  MOZ_ASSERT(srv == SQLITE_OK,","708","             \"SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER should be enabled\");","709","#endif","710","","744","  int64_t pageSize = Service::kDefaultPageSize;","780","  \/\/ Set the default synchronous value. Each consumer can switch this","781","  \/\/ accordingly to their needs.","782","#if defined(ANDROID)","783","  \/\/ Android prefers synchronous = OFF for performance reasons.","784","  Unused << ExecuteSimpleSQL(\"PRAGMA synchronous = OFF;\"_ns);","785","#else","786","  \/\/ Normal is the suggested value for WAL journals.","787","  Unused << ExecuteSimpleSQL(\"PRAGMA synchronous = NORMAL;\"_ns);","788","#endif","1636","  *_defaultPageSize = Service::kDefaultPageSize;"],"delete":["74","const char* GetVFSName();","567","  int srv = ::sqlite3_open_v2(\":memory:\", &mDBConn, mFlags, GetVFSName());","606","  const char* vfs = mIgnoreLockingMode ? sIgnoreLockingVFS : GetVFSName();","608","  int srv = ::sqlite3_open_v2(NS_ConvertUTF16toUTF8(path).get(), &mDBConn,","609","                              mFlags, vfs);","615","#ifdef MOZ_SQLITE_FTS3_TOKENIZER","616","  srv =","617","      ::sqlite3_db_config(mDBConn, SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER, 1, 0);","618","  MOZ_ASSERT(srv == SQLITE_OK,","619","             \"SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER should be enabled\");","620","#endif","621","","622","  \/\/ Do not set mFileURL here since this is database does not have an associated","623","  \/\/ URL.","624","  mDatabaseFile = aDatabaseFile;","625","","646","  int srv = ::sqlite3_open_v2(spec.get(), &mDBConn, mFlags, GetVFSName());","652","#ifdef MOZ_SQLITE_FTS3_TOKENIZER","653","  srv =","654","      ::sqlite3_db_config(mDBConn, SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER, 1, 0);","655","  MOZ_ASSERT(srv == SQLITE_OK,","656","             \"SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER should be enabled\");","657","#endif","658","","659","  \/\/ Set both mDatabaseFile and mFileURL here.","660","  mFileURL = aFileURL;","661","  mDatabaseFile = databaseFile;","662","","671","","707","  int64_t pageSize = Service::getDefaultPageSize();","743","  \/\/ Set the synchronous PRAGMA, according to the preference.","744","  switch (Service::getSynchronousPref()) {","745","    case 2:","746","      (void)ExecuteSimpleSQL(\"PRAGMA synchronous = FULL;\"_ns);","747","      break;","748","    case 0:","749","      (void)ExecuteSimpleSQL(\"PRAGMA synchronous = OFF;\"_ns);","750","      break;","751","    case 1:","752","    default:","753","      (void)ExecuteSimpleSQL(\"PRAGMA synchronous = NORMAL;\"_ns);","754","      break;","755","  }","1603","  *_defaultPageSize = Service::getDefaultPageSize();"]}],"modules\/libpref\/init\/StaticPrefList.yaml":[{"add":["9001","# Prefs starting with \"storage.\"","9002","#---------------------------------------------------------------------------","9003","","9004","# Whether to use a non-exclusive VFS.","9005","# By default we use the unix-excl VFS, for the following reasons:","9006","# 1. It improves compatibility with NFS shares, whose implementation","9007","#    is incompatible with SQLite's locking requirements (reliable fcntl), and","9008","#    in particular with WAL journaling.","9009","#    Bug 433129 attempted to automatically identify such file-systems,","9010","#    but a reliable way was not found and the fallback locking is slower than","9011","#    POSIX locking, so we do not want to do it by default.","9012","# 2. It allows wal mode to avoid the memory mapped -shm file, reducing the","9013","#    likelihood of SIGBUS failures when disk space is exhausted.","9014","# 3. It provides some protection from third party database tampering while a","9015","#    connection is open.","9016","# Note there's no win32-excl VFS, so this has no effect on Windows.","9017","- name: storage.sqlite.exclusiveLock.enabled","9018","  type: RelaxedAtomicBool","9019","  value: @IS_NOT_ANDROID@","9020","  mirror: always","9021","","9022","#---------------------------------------------------------------------------"],"delete":[]}],"storage\/VacuumManager.cpp":[{"add":["17","#include \"mozilla\/StaticPrefs_storage.h\"","140","    expectedPageSize = Service::kDefaultPageSize;"],"delete":["139","    expectedPageSize = Service::getDefaultPageSize();"]}],"mobile\/android\/app\/mobile.js":[{"add":[],"delete":["53","\/\/ Mobile will use faster, less durable mode.","54","pref(\"toolkit.storage.synchronous\", 0);","55","","56","\/\/ Android needs concurrent access to the same database from multiple processes,","57","\/\/ thus we can't use exclusive locking on it.","58","pref(\"storage.multiProcessAccess.enabled\", true);","59",""]}],"storage\/mozStorageService.cpp":[{"add":["179","      mSqliteExclVFS(nullptr),","188","  int srv = sqlite3_vfs_unregister(mSqliteVFS);","189","  if (srv != SQLITE_OK) NS_WARNING(\"Failed to unregister sqlite vfs wrapper.\");","190","  srv = sqlite3_vfs_unregister(mSqliteExclVFS);","191","  if (srv != SQLITE_OK) NS_WARNING(\"Failed to unregister sqlite vfs wrapper.\");","196","  delete mSqliteExclVFS;","197","  mSqliteExclVFS = nullptr;","296","sqlite3_vfs* ConstructTelemetryVFS(bool);","297","const char* GetVFSName(bool);","308","  mSqliteVFS = ConstructTelemetryVFS(false);","309","  MOZ_ASSERT(mSqliteVFS, \"Non-exclusive VFS should be created\");","313","  }","314","  mSqliteExclVFS = ConstructTelemetryVFS(true);","315","  MOZ_ASSERT(mSqliteExclVFS, \"Exclusive VFS should be created\");","316","  if (mSqliteExclVFS) {","317","    rc = sqlite3_vfs_register(mSqliteExclVFS, 0);","318","    if (rc != SQLITE_OK) return convertResultCode(rc);"],"delete":["20","#include \"mozilla\/Preferences.h\"","33","\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/","34","\/\/\/\/ Defines","35","","36","#define PREF_TS_SYNCHRONOUS \"toolkit.storage.synchronous\"","37","#define PREF_TS_SYNCHRONOUS_DEFAULT 1","38","","39","#define PREF_TS_PAGESIZE \"toolkit.storage.pageSize\"","40","","41","\/\/ This value must be kept in sync with the value of SQLITE_DEFAULT_PAGE_SIZE in","42","\/\/ third_party\/sqlite3\/src\/Makefile.in.","43","#define PREF_TS_PAGESIZE_DEFAULT 32768","44","","190","int32_t Service::sSynchronousPref;","191","","192","\/\/ static","193","int32_t Service::getSynchronousPref() { return sSynchronousPref; }","194","","195","int32_t Service::sDefaultPageSize = PREF_TS_PAGESIZE_DEFAULT;","196","","207","  int rc = sqlite3_vfs_unregister(mSqliteVFS);","208","  if (rc != SQLITE_OK) NS_WARNING(\"Failed to unregister sqlite vfs wrapper.\");","311","sqlite3_vfs* ConstructTelemetryVFS();","312","const char* GetVFSName();","323","  mSqliteVFS = ConstructTelemetryVFS();","327","  } else {","328","    NS_WARNING(\"Failed to register telemetry VFS\");","341","  \/\/ We need to obtain the toolkit.storage.synchronous preferences on the main","342","  \/\/ thread because the preference service can only be accessed there.  This","343","  \/\/ is cached in the service for all future Open[Unshared]Database calls.","344","  sSynchronousPref =","345","      Preferences::GetInt(PREF_TS_SYNCHRONOUS, PREF_TS_SYNCHRONOUS_DEFAULT);","346","","347","  \/\/ We need to obtain the toolkit.storage.pageSize preferences on the main","348","  \/\/ thread because the preference service can only be accessed there.  This","349","  \/\/ is cached in the service for all future Open[Unshared]Database calls.","350","  sDefaultPageSize =","351","      Preferences::GetInt(PREF_TS_PAGESIZE, PREF_TS_PAGESIZE_DEFAULT);","352",""]}],"storage\/mozStorageService.h":[{"add":["68","  static const int32_t kDefaultPageSize = 32768;","69","","116","  sqlite3_vfs* mSqliteExclVFS;"],"delete":["59","   * Obtains the cached data for the toolkit.storage.synchronous preference.","60","   *\/","61","  static int32_t getSynchronousPref();","62","","63","  \/**","64","   * Obtains the default page size for this platform. The default value is","65","   * specified in the SQLite makefile (SQLITE_DEFAULT_PAGE_SIZE) but it may be","66","   * overriden with the PREF_TS_PAGESIZE hidden preference.","67","   *\/","68","  static int32_t getDefaultPageSize() { return sDefaultPageSize; }","69","","70","  \/**","168","","169","  static int32_t sSynchronousPref;","170","  static int32_t sDefaultPageSize;"]}],"modules\/libpref\/moz.build":[{"add":["76","    'storage',"],"delete":[]}],"toolkit\/components\/contentprefs\/ContentPrefService2.jsm":[{"add":["1218","    await conn.execute(\"PRAGMA synchronous = OFF\");"],"delete":["1218","    \/\/","1219","    \/\/ If you really don't want to take this risk, however, just set the","1220","    \/\/ toolkit.storage.synchronous pref to 1 (NORMAL synchronization) or 2","1221","    \/\/ (FULL synchronization), in which case mozStorageConnection::Initialize","1222","    \/\/ will use that value, and we won't override it here.","1223","    if (!Services.prefs.prefHasUserValue(\"toolkit.storage.synchronous\")) {","1224","      await conn.execute(\"PRAGMA synchronous = OFF\");","1225","    }"]}]}},"7c427e698ae0979a8a7fe0a91ad53facc5f3a002":{"changes":{"layout\/svg\/SVGObserverUtils.cpp":"MODIFY","layout\/svg\/SVGGradientFrame.cpp":"MODIFY","dom\/svg\/SVGContentUtils.cpp":"MODIFY","layout\/svg\/CSSClipPathInstance.cpp":"MODIFY","layout\/svg\/SVGOuterSVGFrame.cpp":"MODIFY","layout\/svg\/SVGUtils.cpp":"MODIFY","layout\/svg\/SVGGeometryFrame.cpp":"MODIFY","layout\/svg\/SVGClipPathFrame.cpp":"MODIFY","layout\/svg\/SVGContextPaint.cpp":"MODIFY"},"diff":{"layout\/svg\/SVGObserverUtils.cpp":[{"add":["52","  explicit URLAndReferrerInfoHashKey(const URLAndReferrerInfo* aKey) noexcept","56","  URLAndReferrerInfoHashKey(URLAndReferrerInfoHashKey&& aToMove) noexcept"],"delete":["52","  explicit URLAndReferrerInfoHashKey(const URLAndReferrerInfo* aKey)","56","  URLAndReferrerInfoHashKey(URLAndReferrerInfoHashKey&& aToMove)"]}],"layout\/svg\/SVGGradientFrame.cpp":[{"add":["250","    auto* lastStopFrame = stopFrames[nStops - 1];","251","    const auto* svgReset = lastStopFrame->StyleSVGReset();"],"delete":["250","    auto lastStopFrame = stopFrames[nStops - 1];","251","    auto svgReset = lastStopFrame->StyleSVGReset();"]}],"dom\/svg\/SVGContentUtils.cpp":[{"add":["816","    const auto& calc = aLength.AsCalc();"],"delete":["816","    auto& calc = aLength.AsCalc();"]}],"layout\/svg\/CSSClipPathInstance.cpp":[{"add":["30","  const auto& clipPathStyle = aFrame->StyleSVGReset()->mClipPath;","50","  const auto& clipPathStyle = aFrame->StyleSVGReset()->mClipPath;"],"delete":["30","  auto& clipPathStyle = aFrame->StyleSVGReset()->mClipPath;","50","  auto& clipPathStyle = aFrame->StyleSVGReset()->mClipPath;"]}],"layout\/svg\/SVGOuterSVGFrame.cpp":[{"add":["676","  const auto* geometry ="],"delete":["676","  auto geometry ="]}],"layout\/svg\/SVGUtils.cpp":[{"add":["935","  const auto& rect = effects->mClip.AsRect();"],"delete":["935","  auto& rect = effects->mClip.AsRect();"]}],"layout\/svg\/SVGGeometryFrame.cpp":[{"add":["95","  const auto* geometry =","143","    const auto* oldStyleSVG = aOldComputedStyle->StyleSVG();","731","  auto* element = static_cast<SVGGeometryElement*>(GetContent());"],"delete":["95","  auto geometry =","143","    auto* oldStyleSVG = aOldComputedStyle->StyleSVG();","731","  auto element = static_cast<SVGGeometryElement*>(GetContent());"]}],"layout\/svg\/SVGClipPathFrame.cpp":[{"add":["477","  const auto* e = static_cast<SVGElement const*>(GetContent());"],"delete":["477","  auto e = static_cast<SVGElement const*>(GetContent());"]}],"layout\/svg\/SVGContextPaint.cpp":[{"add":["191","  const auto* contextPaint =","192","      ownerDoc->AsSVGDocument()->GetCurrentContextPaint();"],"delete":["191","  auto* contextPaint = ownerDoc->AsSVGDocument()->GetCurrentContextPaint();"]}]}},"1e1856b4fe5206bdea66eca1a54a443ff91c0775":{"changes":{"browser\/themes\/shared\/controlcenter\/panel.inc.css":"MODIFY","browser\/base\/content\/pageinfo\/pageInfo.js":"MODIFY","browser\/base\/content\/test\/siteIdentity\/browser_check_identity_state.js":"MODIFY","browser\/base\/content\/browser-siteIdentity.js":"MODIFY","browser\/themes\/shared\/identity-block\/identity-block.inc.css":"MODIFY","browser\/components\/controlcenter\/content\/identityPanel.inc.xhtml":"MODIFY"},"diff":{"browser\/themes\/shared\/controlcenter\/panel.inc.css":[{"add":["64","#identity-popup[connection=https-only-error-page] [when-connection~=https-only-error-page],"],"delete":[]}],"browser\/base\/content\/pageinfo\/pageInfo.js":[{"add":["390","    uri.spec.startsWith(\"about:certerror\") ||","391","    uri.spec.startsWith(\"about:httpsonlyerror\")"],"delete":["390","    uri.spec.startsWith(\"about:certerror\")"]}],"browser\/base\/content\/test\/siteIdentity\/browser_check_identity_state.js":[{"add":["409","add_task(async function httpsOnlyErrorTest() {","410","  let oldTab = await loadNewTab(\"about:robots\");","411","  await SpecialPowers.pushPrefEnv({","412","    set: [[\"dom.security.https_only_mode\", true]],","413","  });","414","  let newTab = BrowserTestUtils.addTab(gBrowser);","415","  gBrowser.selectedTab = newTab;","416","","417","  let promise = BrowserTestUtils.waitForErrorPage(gBrowser.selectedBrowser);","418","  BrowserTestUtils.loadURI(gBrowser, \"http:\/\/nocert.example.com\/\");","419","  await promise;","420","  is(","421","    getIdentityMode(),","422","    \"httpsOnlyErrorPage\",","423","    \"Identity should be the https-only mode error page.\"","424","  );","425","  is(","426","    getConnectionState(),","427","    \"https-only-error-page\",","428","    \"Connection should be the https-only mode error page.\"","429","  );","430","","431","  gBrowser.selectedTab = oldTab;","432","  is(getIdentityMode(), \"localResource\", \"Identity should be localResource\");","433","","434","  gBrowser.selectedTab = newTab;","435","  is(","436","    getIdentityMode(),","437","    \"httpsOnlyErrorPage\",","438","    \"Identity should be the https-only mode error page.\"","439","  );","440","  is(","441","    getConnectionState(),","442","    \"https-only-error-page\",","443","    \"Connection should be the https-only mode page.\"","444","  );","445","","446","  gBrowser.removeTab(newTab);","447","  gBrowser.removeTab(oldTab);","448","","449","  await SpecialPowers.popPrefEnv();","450","});","451",""],"delete":[]}],"browser\/base\/content\/browser-siteIdentity.js":[{"add":["141","  get _isAboutHttpsOnlyErrorPage() {","142","    return (","143","      gBrowser.selectedBrowser.documentURI &&","144","      gBrowser.selectedBrowser.documentURI.scheme == \"about\" &&","145","      gBrowser.selectedBrowser.documentURI.pathQueryRef.startsWith(","146","        \"httpsonlyerror\"","147","      )","148","    );","149","  },","150","","768","    } else if (this._isAboutHttpsOnlyErrorPage) {","769","      \/\/ We show a not secure lock icon for 'about:httpsonlyerror' page.","770","      this._identityBox.className = \"httpsOnlyErrorPage\";","955","    } else if (this._isAboutHttpsOnlyErrorPage) {","956","      connection = \"https-only-error-page\";"],"delete":[]}],"browser\/themes\/shared\/identity-block\/identity-block.inc.css":[{"add":["164","#identity-box[pageproxystate=\"valid\"].mixedActiveContent > #identity-icon,","165","#identity-box[pageproxystate=\"valid\"].httpsOnlyErrorPage > #identity-icon {"],"delete":["164","#identity-box[pageproxystate=\"valid\"].mixedActiveContent > #identity-icon {"]}],"browser\/components\/controlcenter\/content\/identityPanel.inc.xhtml":[{"add":["32","                         when-connection=\"not-secure secure-cert-user-overridden secure-custom-root cert-error-page https-only-error-page\" data-l10n-id=\"identity-connection-not-secure\"><\/description>","58","                when-connection=\"not-secure secure secure-ev secure-cert-user-overridden cert-error-page https-only-error-page\"","64","            when-connection=\"not-secure secure secure-ev secure-cert-user-overridden file extension cert-error-page https-only-error-page\">","95","                       when-connection=\"not-secure secure-cert-user-overridden cert-error-page https-only-error-page\" data-l10n-id=\"identity-connection-not-secure-security-view\"><\/description>","124","        <description when-connection=\"not-secure cert-error-page https-only-error-page\""],"delete":["32","                         when-connection=\"not-secure secure-cert-user-overridden secure-custom-root cert-error-page\" data-l10n-id=\"identity-connection-not-secure\"><\/description>","58","                when-connection=\"not-secure secure secure-ev secure-cert-user-overridden cert-error-page\"","64","            when-connection=\"not-secure secure secure-ev secure-cert-user-overridden file extension cert-error-page\">","95","                       when-connection=\"not-secure secure-cert-user-overridden cert-error-page\" data-l10n-id=\"identity-connection-not-secure-security-view\"><\/description>","124","        <description when-connection=\"not-secure cert-error-page\""]}]}},"38cbb074297037b3c938a91b8e9f23918b04ebaf":{"changes":{"gfx\/layers\/apz\/test\/mochitest\/apz_test_native_event_utils.js":"MODIFY"},"diff":{"gfx\/layers\/apz\/test\/mochitest\/apz_test_native_event_utils.js":[{"add":["7","  \/\/ Use window.top to get the root content window which is what has","8","  \/\/ the resolution.","9","  resolution = SpecialPowers.getDOMWindowUtils(window.top).getResolution();","164","\/\/ Get the origin of |aTarget| relative to the root content document's","165","\/\/ visual viewport in CSS coordinates.","166","\/\/ |aTarget| may be an element (contained in the root content document or","167","\/\/ a subdocument) or, as a special case, the root content window.","168","\/\/ FIXME: Support iframe windows as targets.","169","function getTargetOrigin(aTarget) {","170","  let origin = { left: 0, top: 0 };","171","","172","  \/\/ If the target is the root content window, its origin relative","173","  \/\/ to the visual viewport is (0, 0).","174","  if (aTarget instanceof Window) {","175","    \/\/ FIXME: Assert that it's not an iframe window.","176","    return origin;","177","  }","178","","179","  \/\/ Otherwise, we have an element. Start with the origin of","180","  \/\/ its bounding client rect which is relative to the enclosing","181","  \/\/ document's layout viewport. Note that for iframes, the","182","  \/\/ layout viewport is also the visual viewport.","183","  let rect = aTarget.getBoundingClientRect();","184","  origin.left += rect.left;","185","  origin.top += rect.top;","186","","187","  \/\/ Iterate up the window hierarchy until we reach the root","188","  \/\/ content window, adding the offsets of any iframe windows","189","  \/\/ relative to their parent window.","190","  while (aTarget.ownerDocument.defaultView.frameElement) {","191","    let iframe = aTarget.ownerDocument.defaultView.frameElement;","192","    \/\/ The offset of the iframe window relative to the parent window","193","    \/\/ includes the iframe's border, and the iframe's origin in its","194","    \/\/ containing document.","195","    let style = iframe.ownerDocument.defaultView.getComputedStyle(iframe);","196","    let borderLeft = parseFloat(style.borderLeftWidth) || 0;","197","    let borderTop = parseFloat(style.borderTopWidth) || 0;","198","    let paddingLeft = parseFloat(style.paddingLeft) || 0;","199","    let paddingTop = parseFloat(style.paddingTop) || 0;","200","    rect = iframe.getBoundingClientRect();","201","    origin.left += rect.left + borderLeft + paddingLeft;","202","    origin.top += rect.top + borderTop + paddingTop;","203","    aTarget = iframe;","204","  }","205","","206","  \/\/ Now we have coordinates relative to the root content document's","207","  \/\/ layout viewport. Subtract the offset of the visual viewport","208","  \/\/ relative to the layout viewport, to get coordinates relative to","209","  \/\/ the visual viewport.","210","  var offsetX = {},","211","    offsetY = {};","212","  let rootUtils = SpecialPowers.getDOMWindowUtils(window.top);","213","  rootUtils.getVisualViewportOffsetRelativeToLayoutViewport(offsetX, offsetY);","214","  origin.left -= offsetX.value;","215","  origin.top -= offsetY.value;","216","  return origin;","217","}","218","","222","  \/\/ Note that |window| might not be the root content window, for two","223","  \/\/ possible reasons:","224","  \/\/  1. The mochitest that's calling into this function is not using a mechanism","225","  \/\/     like runSubtestsSeriallyInFreshWindows() to load the test page in","226","  \/\/     a top-level context, so it's loaded into an iframe by the mochitest","227","  \/\/     harness.","228","  \/\/  2. The mochitest itself creates an iframe and calls this function from","229","  \/\/     script running in the context of the iframe.","230","  \/\/ Since the resolution applies to the root content document, below we use","231","  \/\/ the mozInnerScreen{X,Y} of the root content window (window.top) only,","232","  \/\/ and factor any offsets between iframe windows and the root content window","233","  \/\/ into |origin|.","238","  var origin = getTargetOrigin(aTarget);","246","      window.top.mozInnerScreenX * deviceScaleNoOverride +","247","      (origin.left + aX) * resolution * deviceScale,","249","      window.top.mozInnerScreenY * deviceScaleNoOverride +","250","      (origin.top + aY) * resolution * deviceScale,"],"delete":["7","  resolution = SpecialPowers.getDOMWindowUtils(window).getResolution();","165","  var targetWindow = windowForTarget(aTarget);","170","  var rect =","171","    aTarget instanceof Window","172","      ? { left: 0, top: 0 } \/* we don't use the width or height *\/","173","      : getBoundingClientRectRelativeToVisualViewport(aTarget);","181","      targetWindow.mozInnerScreenX * deviceScaleNoOverride +","182","      (rect.left + aX) * resolution * deviceScale,","184","      targetWindow.mozInnerScreenY * deviceScaleNoOverride +","185","      (rect.top + aY) * resolution * deviceScale,"]}]}},"a589afcb7d22b21d1e560583847da8c77252995d":{"changes":{"js\/src\/frontend\/ParseNode.h":"MODIFY","js\/src\/tests\/non262\/expressions\/optional-chain.js":"MODIFY","js\/src\/frontend\/BytecodeEmitter.cpp":"MODIFY"},"diff":{"js\/src\/frontend\/ParseNode.h":[{"add":["471"," *   kid: expression that is evaluated as a chain. An Optional chain contains","472"," *        one or more optional nodes. It's first node (kid) is always an","473"," *        optional node, for example: an OptionalElemExpr, OptionalDotExpr, or","474"," *        OptionalCall.  An OptionalChain will shortcircuit and return","475"," *        Undefined without evaluating the rest of the expression if any of the","476"," *        optional nodes it contains are nullish. An optionalChain also can","477"," *        contain nodes such as DotExpr, ElemExpr, NameExpr CallExpr, etc.","478"," *        These are evaluated normally.","490"," * OptionalDotExpr (OptionalPropertyAccess)","491"," *   left: MEMBER expr to left of '.', short circuits back to OptionalChain","492"," *        if nullish.","493"," *   right: PropertyName to right of '.'","497"," * OptionalElemExpr (OptionalPropertyByValue)","498"," *   left: MEMBER expr to left of '[', short circuits back to OptionalChain","499"," *         if nullish.","500"," *   right: expr between '[' and ']'","504"," * OptionalCallExpr (BinaryNode)","505"," *   left: callee expression on the left of the '(', short circuits back to","506"," *         OptionalChain if nullish.","507"," *   right: Arguments"],"delete":["471"," *   kid: expression that is evaluated. Contains optional nodes such as","472"," *        OptionalElemExpr, OptionalDotExpr, and OptionalCall, which","473"," *        shortcircuit and return Undefined without evaluating the rest of the","474"," *        expression of the node is nullish. Also can contain nodes such as","475"," *        DotExpr, ElemExpr, NameExpr CallExpr, etc. These are evaluated","476"," *        normally."]}],"js\/src\/tests\/non262\/expressions\/optional-chain.js":[{"add":["254","shouldBe(delete undefined ?.x[y+1], true);"],"delete":[]}],"js\/src\/frontend\/BytecodeEmitter.cpp":[{"add":["7015","  if (!emitTree(&elemExpr->key())) {","8014","      MOZ_ASSERT(isMemberExpression || isCallExpression,"],"delete":["7015","  if (!emitOptionalTree(&elemExpr->key(), oe)) {","8014","      \/\/ These should be handled through the main parse tree","8015","      bool isOptionalExpression =","8016","          kind == ParseNodeKind::OptionalChain ||","8017","          kind == ParseNodeKind::DeleteOptionalChainExpr;","8018","","8019","      MOZ_ASSERT(isMemberExpression || isCallExpression || isOptionalExpression,"]}]}},"a1ea15806fb1fde47085643a2447905a07ee04be":{"changes":{"toolkit\/components\/prompts\/content\/tabprompts.css":"MODIFY"},"diff":{"toolkit\/components\/prompts\/content\/tabprompts.css":[{"add":["61","  \/* TODO: figure out which element is preventing this from showing *\/","62","  z-index: 1;","63","  width: 100%;","69","  height: 600px;"],"delete":["66","  height: 500px;"]}]}},"52a799b296b3b483f67cfd89305a97adc6793caf":{"changes":{"browser\/themes\/shared\/webRTC-indicator.inc.css":"MODIFY","browser\/themes\/windows\/webRTC-indicator.css":"MODIFY"},"diff":{"browser\/themes\/shared\/webRTC-indicator.inc.css":[{"add":["11","  --indicator-color: rgb(12,12,13);","13","  --indicator-icon-fill-opacity: 0.8;","26","@media (prefers-color-scheme: dark) {","27","  :root {","28","    --indicator-background-color: hsl(240, 1%, 20%);","29","    --indicator-color: rgb(249, 249, 250);","30","    --indicator-border-color: hsl(240, 1%, 40%);","31","    --indicator-item-separator: 1px solid rgb(249, 249, 250);","32","    --minimize-button-background-color: rgba(249,249,250,0.1);","33","    --minimize-button-hover-background-color: rgba(249,249,250,0.15);","34","    --minimize-button-active-background-color: rgba(249,249,250,0.2);","35","    --device-button-hover-background-color: rgba(249,249,250,0.15);","36","    --device-button-active-background-color: rgba(249,249,250,0.2);","37","  }","38","}","39","","43","  color: var(--indicator-color);","65","  -moz-context-properties: fill, fill-opacity;","66","  fill: currentColor;","67","  fill-opacity: var(--indicator-icon-fill-opacity);","70","  color: inherit;","127","  -moz-context-properties: fill, fill-opacity;","128","  fill: currentColor;","129","  fill-opacity: var(--indicator-icon-fill-opacity);","195","  fill: currentColor;"],"delete":["12","  --indicator-icon-fill: rgba(12,12,13,0.8);","49","  -moz-context-properties: fill;","50","  fill: var(--indicator-icon-fill);","174","  fill: var(--indicator-icon-fill);"]}],"browser\/themes\/windows\/webRTC-indicator.css":[{"add":["9","","10","@media (-moz-windows-default-theme: 0) {","11","  :root {","12","    --indicator-background-color: -moz-Dialog;","13","    --indicator-color: -moz-DialogText;","14","    --indicator-border-color: InactiveBorder;","15","    --indicator-item-separator: 1px solid ThreeDShadow;","16","    --indicator-stop-button-background-color: hsla(0,0%,70%,.2);","17","    --indicator-stop-button-hover-background-color: hsla(0,0%,70%,.4);","18","    --indicator-stop-button-color: inherit;","19","    --minimize-button-background-color: hsla(0,0%,70%,.2);","20","    --minimize-button-hover-background-color: hsla(0,0%,70%,.4);","21","    --minimize-button-active-background-color: hsla(0,0%,70%,.6);","22","    --device-button-hover-background-color: hsla(0,0%,70%,.4);","23","    --device-button-active-background-color: hsla(0,0%,70%,.6);","24","  }","25","","26","  #minimize,","27","  .stop-button {","28","    border: 1px outset ThreeDLightShadow;","29","  }","30","}"],"delete":[]}]}},"18668c950f9af11cefeb6314998617edf556f78d":{"changes":{"storage\/mozStorageConnection.cpp":"MODIFY"},"diff":{"storage\/mozStorageConnection.cpp":[{"add":["705","  DebugOnly<int> srv2 =","707","  MOZ_ASSERT(srv2 == SQLITE_OK,"],"delete":["705","  DebugOnly<int> srv =","707","  MOZ_ASSERT(srv == SQLITE_OK,"]}]}},"31beff2880675c29b08f11d893798c44da647ee7":{"changes":{"gfx\/wr\/swgl\/src\/gl_defs.h":"MODIFY","gfx\/wr\/swgl\/src\/gl.cc":"MODIFY"},"diff":{"gfx\/wr\/swgl\/src\/gl_defs.h":[{"add":["176","","177","#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367","178",""],"delete":[]}],"gfx\/wr\/swgl\/src\/gl.cc":[{"add":["1466","    assert(ty == GL_UNSIGNED_BYTE ||","1467","           ty == GL_UNSIGNED_INT_8_8_8_8_REV);"],"delete":["1466","    assert(ty == GL_UNSIGNED_BYTE);"]}]}},"b783621e6e7e5d4f1e15487aec385d7a4be6b14a":{"changes":{"\/dev\/null":"DELETE","dom\/html\/HTMLIFrameElement.cpp":"MODIFY","dom\/html\/HTMLIFrameElement.h":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"dom\/html\/HTMLIFrameElement.cpp":[{"add":["156","bool HTMLIFrameElement::HasAllowFullscreenAttribute() const {","157","  return GetBoolAttr(nsGkAtoms::allowfullscreen) ||","158","         GetBoolAttr(nsGkAtoms::mozallowfullscreen);","159","}","160","","161","bool HTMLIFrameElement::AllowFullscreen() const {","162","  if (StaticPrefs::dom_security_featurePolicy_enabled()) {","163","    \/\/ This already accounts for allowfullscreen \/ mozallowfullscreen.","164","    return FeaturePolicy()->AllowsFeature(u\"fullscreen\"_ns, {});","165","  }","166","  return HasAllowFullscreenAttribute();","167","}","168","","176","  auto UpdateFullscreenAllowed = [&] {","177","    \/\/ This could be simpler if we didn't support the prefixed attribute, then","178","    \/\/ it could just use !!aValue.","179","    if (mFrameLoader) {","180","      if (auto* bc = mFrameLoader->GetExtantBrowsingContext()) {","181","        bc->SetFullscreenAllowedByOwner(AllowFullscreen());","182","      }","183","    }","184","  };","185","","196","      if (StaticPrefs::dom_security_featurePolicy_enabled()) {","197","        RefreshFeaturePolicy(false \/* parse the feature policy attribute *\/);","199","      UpdateFullscreenAllowed();","206","        UpdateFullscreenAllowed();","207","      } else if (aName == nsGkAtoms::allowpaymentrequest) {","337","  if (HasAllowFullscreenAttribute()) {"],"delete":["173","      if (mFrameLoader) {","174","        if (auto* bc = mFrameLoader->GetExtantBrowsingContext()) {","175","          \/\/ This could be simpler if we didn't support the prefixed","176","          \/\/ attribute, then it could just use !!aValue.","177","          bc->SetFullscreenAllowedByOwner(AllowFullscreen());","178","        }","186","      } else if (aName == nsGkAtoms::allowfullscreen ||","187","                 aName == nsGkAtoms::mozallowfullscreen ||","188","                 aName == nsGkAtoms::allowpaymentrequest) {","318","  if (AllowFullscreen()) {"]}],"dom\/html\/HTMLIFrameElement.h":[{"add":["81","  bool AllowFullscreen() const;","82","","83","  bool HasAllowFullscreenAttribute() const;"],"delete":["10","#include \"mozilla\/dom\/FeaturePolicy.h\"","82","  \/\/ This and AllowFullscreenForBindings can be merged when we remove support","83","  \/\/ for mozallowfullscreen.","84","  bool AllowFullscreen() const {","85","    return GetBoolAttr(nsGkAtoms::allowfullscreen) ||","86","           GetBoolAttr(nsGkAtoms::mozallowfullscreen);","87","  }"]}]}},"9ec63950e7f4c23148fa31a7590ccc7f34ab6bd2":{"changes":{"layout\/base\/nsPresContext.cpp":"MODIFY","dom\/base\/Document.cpp":"MODIFY"},"diff":{"layout\/base\/nsPresContext.cpp":[{"add":["1585","  nsContentUtils::AddScriptRunner(NS_NewRunnableFunction(","1586","      \"nsPresContext::FlushPendingMediaFeatureValuesChanged\",","1587","      [list = std::move(localMediaQueryLists)] {","1588","        \/\/ Now iterate our local array of the lists.","1589","        for (const auto& mql : list) {","1590","          nsAutoMicroTask mt;","1591","          mql->MaybeNotify();","1592","        }","1593","      }));"],"delete":["1556","  if (!mPresShell || !mPresShell->DidInitialize()) {","1557","    return;","1558","  }","1559","","1567","  MOZ_DIAGNOSTIC_ASSERT(nsContentUtils::IsSafeToRunScript());","1568","","1591","  \/\/ Now iterate our local array of the lists.","1592","  for (const auto& mql : localMediaQueryLists) {","1593","    nsAutoMicroTask mt;","1594","    mql->MaybeNotify();","1595","  }"]}],"dom\/base\/Document.cpp":[{"add":["6179","  if (!mStyleSetFilled) {","6185","  \/\/ Gaining a shell causes changes in how media queries are evaluated, so","6186","  \/\/ invalidate that.","6187","  aContext->MediaFeatureValuesChanged({MediaFeatureChange::kAllChanges});"],"delete":["6179","  bool hadStyleSheets = mStyleSetFilled;","6180","  if (!hadStyleSheets) {","6186","  if (hadStyleSheets) {","6187","    \/\/ Gaining a shell causes changes in how media queries are evaluated, so","6188","    \/\/ invalidate that.","6189","    aContext->MediaFeatureValuesChanged({MediaFeatureChange::kAllChanges});","6190","  } else {","6191","    \/\/ Otherwise, we need to at least recompute the initial style now that our","6192","    \/\/ resolution and such may have changed. This is done by","6193","    \/\/ MediaFeatureValuesChanged above otherwise, see","6194","    \/\/ kMediaFeaturesAffectingDefaultStyle.","6195","    mStyleSet->ClearCachedStyleData();","6196","  }"]}]}},"2b6e82201987efee0d835f253d7d5301ab58f723":{"changes":{"netwerk\/cache2\/OldWrappers.cpp":"MODIFY","netwerk\/cache2\/AppCacheStorage.cpp":"MODIFY"},"diff":{"netwerk\/cache2\/OldWrappers.cpp":[{"add":["158","  if (mLoadInfo && mLoadInfo->IsAnonymous()) {"],"delete":["158","  if (mLoadInfo->IsAnonymous()) {"]}],"netwerk\/cache2\/AppCacheStorage.cpp":[{"add":[],"delete":["161","  if (!LoadInfo()) {","162","    return NS_ERROR_CACHE_KEY_NOT_FOUND;","163","  }"]}]}},"3445ca16f5b41d7ff11d547ab5d9f6600795e8e6":{"changes":{"taskcluster\/taskgraph\/transforms\/scriptworker_canary.py":"MODIFY"},"diff":{"taskcluster\/taskgraph\/transforms\/scriptworker_canary.py":[{"add":["20","    scriptworkers = config.params[\"try_task_config\"].get(\"scriptworker-canary-workers\", [])"],"delete":["20","    scriptworkers = config.params[\"try_task_config\"].get(\"scriptworker-canary-workers\")"]}]}}}